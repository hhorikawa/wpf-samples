<!-- -*- mode:xml -*- -->
<!-- x:Class で紐づけるクラスを指定.
  ステイタスバーを表示するときは, ResizeMode="CanResizeWithGrip" がよい. 
  clr-namespace: で XAML とC#コードの名前空間を紐付け。
  -->
<Window x:Class="wpf_datagrid.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:wpf_datagrid"
        xmlns:Models="clr-namespace:wpf_datagrid.Models"
        mc:Ignorable="d"
        Title="SalesOrder List" Height="450" Width="600" ResizeMode="CanResizeWithGrip">

  <!-- 型を指定すると, 自動的にviewmodelインスタンスを生成 -->
  <Window.DataContext>
    <local:MainViewModel />
  </Window.DataContext>

  <Window.Resources>
    <!-- viewmodel のプロパティの値・型を整える -->
    <local:EmailConverter x:Key="EmailConverter" />
    <!-- デザイン時にサンプル行を表示 -->
    <CollectionViewSource x:Key="customerViewSource"
                          d:DesignSource="{d:DesignInstance {x:Type Models:SalesOrder}, CreateList=True}" />
  </Window.Resources>

  <!-- アプリケーションでは, DockPanel が基本 -->
  <DockPanel LastChildFill="True">
    <Menu DockPanel.Dock="Top">
      <MenuItem Header="ファイル(_F)">
        <MenuItem Header="終了(_X)" Command="ApplicationCommands.Close" />
      </MenuItem>
      <MenuItem Header="ウィンドウ(_W)">
        <MenuItem Header="SalesOrder 一覧(_S)"
                  Command="{x:Static local:MyCommands.Window_SalesOrderList}" />
        <MenuItem Header="Customer 一覧(_C)"
                  Command="{x:Static local:MyCommands.Window_CustomerList}" />
      </MenuItem>
    </Menu>
    
    <StatusBar DockPanel.Dock="Bottom">
      <!-- <StatusBar> がコンテナになっているので、単に子アイテムを並べればよ
        い. 
        左下と右下のように、アイテム表示のレイアウトを調整したいときは, 
        <StatusBar.ItemsPanel> で指定する. -->
      <StatusBar.ItemsPanel>
        <ItemsPanelTemplate>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="100" />
            </Grid.ColumnDefinitions>
          </Grid>
        </ItemsPanelTemplate>
      </StatusBar.ItemsPanel>
      <!-- StatusBarItem で表示カラムを指定する. -->
      <StatusBarItem Grid.Column="0" >Status</StatusBarItem>
      <StatusBarItem Grid.Column="1">●パネル2</StatusBarItem>
    </StatusBar>

  <!-- DockPanel: 最後に置いた子アイテムで埋められる.
    StackPanel だと, さらにその内側の要素がストレッチされない. Workaround で
    <Grid> 内に配置.
    また, StackPanel に DataGrid を配置すると, virtualization されないので
    非常に遅い、らしい。
    See http://krishnabhargav.github.io/2010/07/16/WPF-Datagrid-Load-and-Performance.html
  -->
    <Grid Background="Azure" >
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <!-- ストレッチしないほうを Auto にする -->
        <RowDefinition />
      </Grid.RowDefinitions>

      <StackPanel Grid.Row="0" Orientation="Horizontal">
        <TextBox Width="200" Margin="10,10,0,10" />
        <Button Content="フィルタ"
                Command="{x:Static local:MyCommands.FilterOrders}" Margin="5,10,0,10"
                Width="60" />
        <Button Content="新しい受注..."
                Command="{x:Static local:MyCommands.NewSalesOrder}"
                Margin="10,10,0,10" Width="90" />
      </StackPanel>
      <!-- いつでも AutoGenerateColumns="False" で, 列を自分でコントロール -->
      <DataGrid Grid.Row="1" Name="dataGrid"
                ItemsSource="{Binding Source={StaticResource customerViewSource}}"
                AutoGenerateColumns="False" Background="CadetBlue" 
                VerticalScrollBarVisibility="Visible" >
        <DataGrid.Columns>
      <!-- この内側での binding は, ItemsSource で指定したオブジェクトのプロパ
        ティを指す -->
          <DataGridTextColumn Header="Id" Binding="{Binding Id}" />
          <DataGridTextColumn Header="発送先"  Binding="{Binding CustomerShipTo}"  />
          <!-- Uri with the Binding prop. and the text with the ContentBinding prop. -->
          <DataGridHyperlinkColumn Header="Email" 
                                   Binding="{Binding Customer.Email, Converter={StaticResource EmailConverter}, Mode=OneWay}" 
                                   ContentBinding="{Binding Customer.Email}" />
          <DataGridCheckBoxColumn Header="Gold?" Binding="{Binding Customer.Grade}" />
          <!-- 値と表示をプロパティ名で指定 -->
          <DataGridComboBoxColumn Header="Status"
                                  ItemsSource="{Binding Source={x:Static Models:SalesOrder.StatusList}, Mode=OneWay}" 
                                  SelectedValuePath="Key" DisplayMemberPath="Value"
                                  SelectedValueBinding="{Binding Status}" />
          <!-- DataGridTemplateColumn には CanUserSort プロパティがない。ソート
            不可 -->
          <DataGridTemplateColumn Header="">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <!-- さらにここに Grid などを置いてもよい. -->
                <Button Margin="3" Content="詳細" Width="40" 
                        Command="{x:Static local:MyCommands.OrderDetail}" />
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
        </DataGrid.Columns>
      </DataGrid>
    </Grid>
  </DockPanel>
</Window>
